import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = "7564372102:AAEfE-VxNcmlzrTFDQZAqHqOoLYYpVJdw4A"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ConversionState(StatesGroup):
    choosing_currency = State()
    entering_amount = State()

# –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
RATES = {
    'USD_TO_SOM': 12100,
    'EUR_TO_SOM': 12800,
    'RUB_TO_SOM': 152,
    'CNY_TO_SOM': 1700
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞–ª—é—Ç–∞–º–∏
def create_currency_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üíµ –î–æ–ª–ª–∞—Ä (USD)", callback_data='USD_TO_SOM')
    builder.button(text="üí∂ –ï–≤—Ä–æ (EUR)", callback_data='EUR_TO_SOM')
    builder.button(text="üá∑üá∫ –†—É–±–ª—å (RUB)", callback_data='RUB_TO_SOM')
    builder.button(text="üá®üá≥ –Æ–∞–Ω—å (CNY)", callback_data='CNY_TO_SOM')
    builder.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def welcome(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã."""
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
        reply_markup=create_currency_keyboard()
    )
    await ConversionState.choosing_currency.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
@dp.callback_query(lambda callback_query: callback_query.data in RATES)
async def choose_currency(callback_query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã."""
    currency = callback_query.data
    await state.update_data(currency=currency)

    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    await ConversionState.entering_amount.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
@dp.message(ConversionState.entering_amount, F.text)
async def convert_currency(message: types.Message, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        amount = float(message.text)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
        data = await state.get_data()
        currency = data['currency']
        rate = RATES.get(currency)

        result = amount * rate
        await message.answer(f"üí∞ {amount} –µ–¥–∏–Ω–∏—Ü = {result} —Å—É–º–æ–≤")
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
